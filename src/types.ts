import { QuerySyntaxEnum, SortingOrderEnum } from './enums';

export type Fn<T> = (...args:any[]) => T;
export type PrimaryTypes = string | number | boolean | any[] | undefined | null;
export type Obj = { [key:string] : any };
export type LogicalOperatorType = QuerySyntaxEnum.And | QuerySyntaxEnum.Or | QuerySyntaxEnum.Not;
export type Limit = {offsetOrCount:number, count?:number};
export type Table = { name:string, alias:string };
export type Property = { table:Table, name:string, alias:string, type:QuerySyntaxEnum, temporary:boolean };
export type LogicalOperatorScope = { type:QuerySyntaxEnum, properties:PropertyOrLogicalOperatorScope[] }
export type PropertyOrLogicalOperatorScope = Property | LogicalOperatorScope;
export type SortingData = { property:Property, order:SortingOrderEnum };
export type StringOrProperty = string | Property;
export type QuerySyntaxTemplate = (...values:any[]) => (property?:any) => (item?:any) => any;
export type QueryBuildFunction<T> = (query:T) => T;
export type AnyButFunction = Exclude<PrimaryTypes | Obj, (...args:any[])=>any>;

export type TypedFunctionData<T,U> = { alias:string, type:U, param?:T };
export type FunctionData = TypedFunctionData<any,QuerySyntaxEnum>;

type XYParam = { x: number | string | Property, y: number | string | Property};
type FunctionDataWithSingleParam<U> = TypedFunctionData<number | string | Property, U>;
type FunctionDataWithMultipleParams<U> = TypedFunctionData<(number | string | Property)[], U>;
type XYData<U> = TypedFunctionData<XYParam, U>;
type DecimalData<U> = TypedFunctionData<DecimalParam, U>;
type ExtractSubstringData<U> = TypedFunctionData<ExtractSubstringParam, U>;
type ExtractCharsData<U> = TypedFunctionData<ExtractCharsParam, U>;
type PadData<U> = TypedFunctionData<PadParam, U>;

export type Atan2Param = XYParam;
export type InsertParam = { value: number | string | Property, position: number, length: number, toInsert: number | string | Property };
export type PadParam = { value: number | string | Property, length: number, value2: number | string | Property };
export type PowParam = { value: number | string | Property, exponent: number};
export type ConcatWsParam = { separator: string, values: (number | string | Property)[] };
export type FieldParam = { search: number | string | Property, values: (number | string | Property)[] };
export type FindInSetParam = { search: number | string | Property, set: string | Property};
export type InstrParam = { value: number | string | Property, search: number | string | Property};
export type RepeatParam = { value: number | string | Property, count: number };
export type ReplaceParam = { value: number | string | Property, from: number | string | Property, to: number | string | Property };
export type StrcmpParam = { value: number | string | Property, value2: number | string | Property };
export type SubstrIndexParam = { value: number | string | Property, delimiter: string, count: number };
export type PositionParam = { substring: string | Property, value: string | Property};
export type ExtractCharsParam = { value: number | string | Property, charsCount: number };
export type ExtractSubstringParam = { value: number | string | Property, start: number, length: number };
export type DecimalParam = { value: number | string | Property, decimal: number };

export type PowData = TypedFunctionData<PowParam, QuerySyntaxEnum.Pow>;
export type ConcatWsData = TypedFunctionData<ConcatWsParam, QuerySyntaxEnum.ConcatWs>;
export type FieldData = TypedFunctionData<FieldParam, QuerySyntaxEnum.Field>;
export type FindInSetData = TypedFunctionData<FindInSetParam, QuerySyntaxEnum.FindInSet>;
export type InstrData = TypedFunctionData<InstrParam, QuerySyntaxEnum.Instr>;
export type PositionData = TypedFunctionData<PositionParam, QuerySyntaxEnum.Position>;
export type InsertData = TypedFunctionData<InsertParam, QuerySyntaxEnum.InsertString>;
export type RepeatData = TypedFunctionData<RepeatParam, QuerySyntaxEnum.Repeat>;
export type ReplaceData = TypedFunctionData<ReplaceParam, QuerySyntaxEnum.ReplaceString>;
export type StrcmpData = TypedFunctionData<StrcmpParam, QuerySyntaxEnum.Strcmp>;
export type SubstrIndexData = TypedFunctionData<SubstrIndexParam, QuerySyntaxEnum.SubstringIndex>;
export type CountData = FunctionDataWithSingleParam<QuerySyntaxEnum.Count>;
export type MaxData = FunctionDataWithSingleParam<QuerySyntaxEnum.Max>;
export type MinData = FunctionDataWithSingleParam<QuerySyntaxEnum.Min>;
export type SumData = FunctionDataWithSingleParam<QuerySyntaxEnum.Sum>;
export type AvgData = FunctionDataWithSingleParam<QuerySyntaxEnum.Avg>;
export type SqrtData = FunctionDataWithSingleParam<QuerySyntaxEnum.Sqrt>;
export type AbsData = FunctionDataWithSingleParam<QuerySyntaxEnum.Abs>;
export type AcosData = FunctionDataWithSingleParam<QuerySyntaxEnum.Acos>;
export type AsinData = FunctionDataWithSingleParam<QuerySyntaxEnum.Asin>;
export type AtanData = FunctionDataWithSingleParam<QuerySyntaxEnum.Atan>;
export type CeilData = FunctionDataWithSingleParam<QuerySyntaxEnum.Ceil>;
export type CosData = FunctionDataWithSingleParam<QuerySyntaxEnum.Cos>;
export type CotData = FunctionDataWithSingleParam<QuerySyntaxEnum.Cot>;
export type ExpData = FunctionDataWithSingleParam<QuerySyntaxEnum.Exp>;
export type FloorData = FunctionDataWithSingleParam<QuerySyntaxEnum.Floor>;
export type LnData = FunctionDataWithSingleParam<QuerySyntaxEnum.Ln>;
export type LogData = FunctionDataWithSingleParam<QuerySyntaxEnum.Log>;
export type Log10Data = FunctionDataWithSingleParam<QuerySyntaxEnum.Log10>;
export type Log2Data = FunctionDataWithSingleParam<QuerySyntaxEnum.Log2>;
export type RadiansData = FunctionDataWithSingleParam<QuerySyntaxEnum.Radians>;
export type RandData = FunctionDataWithSingleParam<QuerySyntaxEnum.Rand>;
export type SignData = FunctionDataWithSingleParam<QuerySyntaxEnum.Sign>;
export type SinData = FunctionDataWithSingleParam<QuerySyntaxEnum.Sin>;
export type TanData = FunctionDataWithSingleParam<QuerySyntaxEnum.Tan>;
export type TruncateData = FunctionDataWithSingleParam<QuerySyntaxEnum.Truncate>;
export type AsciiData = FunctionDataWithSingleParam<QuerySyntaxEnum.Ascii>;
export type CharLengthData = FunctionDataWithSingleParam<QuerySyntaxEnum.CharLength>;
export type LcaseData = FunctionDataWithSingleParam<QuerySyntaxEnum.Lcase>;
export type LengthData = FunctionDataWithSingleParam<QuerySyntaxEnum.Length>;
export type LTrimData = FunctionDataWithSingleParam<QuerySyntaxEnum.Ltrim>;
export type ReverseData = FunctionDataWithSingleParam<QuerySyntaxEnum.Reverse>;
export type RTrimData = FunctionDataWithSingleParam<QuerySyntaxEnum.Rtrim>;
export type SpaceData = FunctionDataWithSingleParam<QuerySyntaxEnum.Space>;
export type TrimData = FunctionDataWithSingleParam<QuerySyntaxEnum.Trim>;
export type UcaseData = FunctionDataWithSingleParam<QuerySyntaxEnum.Ucase>;
export type BinData = FunctionDataWithSingleParam<QuerySyntaxEnum.Bin>;
export type BinaryData = FunctionDataWithSingleParam<QuerySyntaxEnum.Binary>;
export type GreatestData = FunctionDataWithMultipleParams<QuerySyntaxEnum.Greatest>;
export type LeastData = FunctionDataWithMultipleParams<QuerySyntaxEnum.Least>;
export type CoalesceData = FunctionDataWithMultipleParams<QuerySyntaxEnum.Coalesce>;
export type DegreesData = FunctionDataWithSingleParam<QuerySyntaxEnum.Degrees>;
export type ConcatData = FunctionDataWithMultipleParams<QuerySyntaxEnum.Concat>;
export type Atan2Data = XYData<QuerySyntaxEnum.Atan2>;
export type DivData = XYData<QuerySyntaxEnum.Div>;
export type ModData = XYData<QuerySyntaxEnum.Mod>;
export type LPadData = PadData<QuerySyntaxEnum.Lpad>;
export type RPadData = PadData<QuerySyntaxEnum.Rpad>;
export type RoundData = DecimalData<QuerySyntaxEnum.Round>;
export type FormatData = DecimalData<QuerySyntaxEnum.Format>;
export type LeftData = ExtractCharsData<QuerySyntaxEnum.Left>;
export type RightData = ExtractCharsData<QuerySyntaxEnum.Right>;
export type MidData = ExtractSubstringData<QuerySyntaxEnum.Mid>;
export type SubstrData = ExtractSubstringData<QuerySyntaxEnum.Substr>;
export type PiData = TypedFunctionData<null,QuerySyntaxEnum.Pi>;
export type CastAsDateData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsDate>;
export type CastAsDatetimeData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsDatetime>;
export type CastAsTimeData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsTime>;
export type CastAsCharData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsChar>;
export type CastAsSignedData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsSigned>;
export type CastAsUnsignedData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsUnsigned>;
export type CastAsBinaryData = FunctionDataWithSingleParam<QuerySyntaxEnum.CastAsBinary>;