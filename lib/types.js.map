{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { QuerySyntaxEnum, SortingOrderEnum } from './enums';\r\n\r\nexport type Fn = (...args:any[]) => any;\r\nexport type PrimaryTypes = string | number | boolean | any[] | undefined | null;\r\nexport type Obj = { [key:string] : PrimaryTypes | Obj };\r\nexport type ComparisonFunctions = QuerySyntaxEnum.Greatest | QuerySyntaxEnum.Least | QuerySyntaxEnum.Coalesce;\r\nexport type AggregateFunctions = QuerySyntaxEnum.Max | QuerySyntaxEnum.Min | QuerySyntaxEnum.Sum | QuerySyntaxEnum.Avg | QuerySyntaxEnum.Count;\r\nexport type MathFunctions = QuerySyntaxEnum.Sqrt | QuerySyntaxEnum.Pow;\r\nexport type FunctionType = ComparisonFunctions | AggregateFunctions | MathFunctions;\r\nexport type FunctionData = { properties:Property[], alias:string, type:FunctionType, exponent?:number };\r\nexport type LogicalOperatorType = QuerySyntaxEnum.And | QuerySyntaxEnum.Or | QuerySyntaxEnum.Not;\r\nexport type Limit = {offsetOrCount:number, count?:number};\r\nexport type Table = { name:string, alias:string };\r\nexport type Property = { table:Table, name:string, alias:string, type:QuerySyntaxEnum };\r\nexport type LogicalOperatorScope = { type:QuerySyntaxEnum, properties:PropertyOrLogicalOperatorScope[] }\r\nexport type PropertyOrLogicalOperatorScope = Property | LogicalOperatorScope;\r\nexport type SortingData = { property:Property, order:SortingOrderEnum };\r\nexport type StringOrProperty = string | Property;\r\nexport type QuerySyntaxTemplate = (...values:any[]) => (property?:any) => (item?:any) => any;\r\nexport type QueryBuildFunction<T> = (query:T) => T;\r\nexport type AnyButFunction = Exclude<PrimaryTypes | Obj, (...args:any[])=>any>;\r\nexport type CommandProp<T> = QueryBuildFunction<T> | AnyButFunction;\r\n"]}