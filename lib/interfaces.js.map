{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { IQueryAndWhere, IQuerySelect } from './interfaces';\r\nimport { QuerySyntaxEnum } from './enums';\r\nimport { QuerySyntaxTemplate, QueryBuildFunction, CommandProp, AnyButFunction, StringOrProperty, Fn } from './types';\r\n\r\nexport interface IChego {\r\n    executeQuery(query:IQuery):Promise<any>;\r\n}\r\n\r\nexport interface IQuery extends IQueryMethods {\r\n    scheme:IQueryScheme;\r\n}\r\n\r\nexport interface IQueryResult {\r\n    setData(value: any):void;\r\n    getData():AnyButFunction;\r\n}\r\n\r\nexport type QuerySchemeEntry = IQuerySchemeArray | IQuerySchemeElement;\r\n\r\nexport interface IQueryScheme {\r\n    add(type:QuerySyntaxEnum, ...args:any[]):void;\r\n    get(index:number):QuerySchemeEntry;\r\n    toArray():IQuerySchemeArray;\r\n}\r\nexport interface IQuerySchemeArray extends Array<QuerySchemeEntry> {}\r\n\r\nexport interface IQueryTemplates {\r\n    get(method:QuerySyntaxEnum):QuerySyntaxTemplate\r\n}\r\n\r\nexport interface IDatabaseHelpers {\r\n    getValue(result:any):any;\r\n}\r\n\r\nexport interface IDatabaseDriver {\r\n    initialize(config:any):void;\r\n    execute(query:IQuery):Promise<any>;\r\n}\r\n\r\nexport interface IQuerySchemeOld {\r\n    getFromTheEnd(index:number):QuerySyntaxEnum;\r\n    add(element:QuerySyntaxEnum):IQuerySchemeOld;\r\n}\r\n\r\nexport interface IQuerySchemeElement {\r\n    index:number;\r\n    type:QuerySyntaxEnum;\r\n    params:any[];\r\n}\r\n\r\nexport interface IQuerySchemeBuilder extends IQueryMethods {\r\n    build():IQuerySchemeElement[];\r\n}\r\n\r\nexport interface IQueryAnd {\r\n    and:IQueryNot & IQueryEqualTo & IQueryLike & IQueryGT & IQueryLT & IQueryBetween & IQueryWhere & IQueryWrapped;\r\n}\r\n\r\nexport interface IQueryAndWhere {\r\n    and:IQueryWhere;\r\n}\r\n\r\nexport interface IQueryAre {\r\n    are:IQueryNot & IQueryEqualTo & IQueryLike & IQueryGT & IQueryLT & IQueryBetween & IQueryNull;\r\n}\r\n\r\nexport interface IQueryBetween {\r\n    between(min:number,max:number):IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryDelete {\r\n    delete(...args:string[]):IQueryFrom;\r\n}\r\n\r\nexport interface IQueryEqualTo {\r\n    eq(value:CommandProp<IQuery>):IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryWhereExists {\r\n    whereExists(fn:Fn): IQueryOrder & IQueryLimit & IQueryAndWhere & IQueryOrWhere;\r\n}\r\n\r\nexport interface IQueryFrom {\r\n    from(...tables: string[]): IQueryGroupBy & IQueryWhereExists & IQueryUnion & IQueryLeftJoin & IQueryRightJoin & IQueryJoin & IQueryFullJoin & IQueryOrder & IQueryWhere & IQueryLimit & IQueryWrapped;\r\n}\r\n\r\nexport interface IQueryGT {\r\n    gt(value:CommandProp<IQuery>):IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryInsert {\r\n    insert(...items: object[]):IQueryTo;\r\n}\r\n\r\nexport interface IQueryIs {\r\n    is:IQueryNot & IQueryEqualTo & IQueryLike & IQueryGT & IQueryLT & IQueryBetween & IQueryNull;\r\n}\r\n\r\nexport interface IQueryLike {\r\n    like(value:CommandProp<IQuery>):IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryLimit {\r\n    limit(offsetOrCount: number, count?: number):IQueryWhere & IQueryOrder;\r\n}\r\n\r\nexport interface IQueryLT {\r\n    lt(value:CommandProp<IQuery>):IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryNot {\r\n    not:IQueryEqualTo & IQueryLike & IQueryGT & IQueryLT & IQueryBetween & IQueryNull;\r\n}\r\n\r\nexport interface IQueryNull {\r\n    null: IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryOr {\r\n    or:IQueryNot & IQueryEqualTo & IQueryLike & IQueryGT & IQueryLT & IQueryBetween & IQueryWhere;\r\n}\r\n\r\nexport interface IQueryOrWhere {\r\n    or:IQueryWhere;\r\n}\r\n\r\nexport interface IQueryOrder {\r\n    orderBy(...values:StringOrProperty[]):IQueryWhere & IQueryLimit;\r\n}\r\n\r\nexport interface IQuerySelect {\r\n    select(...args:string[]):IQueryFrom;\r\n}\r\n\r\nexport interface IQuerySet {\r\n    set(data: object):IQueryOrder & IQueryWhere & IQueryLimit & IQueryWrapped;\r\n}\r\n\r\nexport interface IQueryTo {\r\n    to(...tables: string[]): IQueryLeftJoin & IQueryRightJoin & IQueryJoin & IQueryFullJoin & IQueryOrder & IQueryWhere & IQueryLimit & IQueryWrapped;\r\n}\r\n\r\nexport interface IQueryUpdate {\r\n    update(...tables: string[]): IQueryLeftJoin & IQueryRightJoin & IQueryJoin & IQueryFullJoin & IQuerySet;\r\n}\r\n\r\nexport interface IQueryWhere {\r\n    where(...values:any[]):IQueryIs & IQueryAre & IQueryAndWhere & IQueryOrWhere & IQueryGroupBy;\r\n}\r\n\r\ntype GetArgumentType<original extends Fn> =\r\n  original extends (...x: infer argumentsType) => any ? argumentsType : never\r\n\r\n\r\nexport interface IQueryWrapped {\r\n    wrapped(fn:QueryBuildFunction<IQuery>):IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\n/* JOIN */\r\n\r\nexport interface IQueryOn {\r\n    on(table:string, key:string):IQueryLeftJoin & IQueryRightJoin & IQueryJoin & IQueryFullJoin & \r\n    IQueryOrder & IQueryWhere & IQueryLimit & IQueryWrapped;\r\n}\r\n\r\nexport interface IQueryLeftJoin {\r\n    leftJoin(table:string, key:string):IQueryOn;\r\n}\r\n\r\nexport interface IQueryRightJoin {\r\n    rightJoin(table:string, key:string):IQueryOn;\r\n}\r\n\r\nexport interface IQueryFullJoin {\r\n    fullJoin(table:string, key:string):IQueryOn;\r\n}\r\n\r\nexport interface IQueryJoin {\r\n    join(table:string, key:string):IQueryOn;\r\n}\r\n\r\nexport interface IQueryUnion {\r\n    union(all:boolean):IQuerySelect;\r\n}\r\n\r\nexport interface IQueryGroupBy {\r\n    groupBy(...values: StringOrProperty[]):IQueryWhere & IQueryOrder & IQueryLimit & IQueryAnd & IQueryOr;\r\n}\r\n\r\nexport interface IQueryMethods extends IQueryAnd,\r\nIQueryAre,\r\nIQueryBetween,\r\nIQueryEqualTo,\r\nIQueryGT,\r\nIQueryIs,\r\nIQueryLike,\r\nIQueryLimit,\r\nIQueryLT,\r\nIQueryNot,\r\nIQueryOr,\r\nIQueryOrder,\r\nIQueryDelete,\r\nIQuerySelect,\r\nIQueryUpdate,\r\nIQueryWhere,\r\nIQueryWrapped,\r\nIQueryFrom,\r\nIQueryInsert,\r\nIQueryTo,\r\nIQueryNull,\r\nIQueryWhereExists,\r\nIQuerySet,\r\nIQueryOn ,\r\nIQueryLeftJoin ,\r\nIQueryRightJoin ,\r\nIQueryJoin ,\r\nIQueryFullJoin,\r\nIQueryUnion,\r\nIQueryGroupBy {\r\n    \r\n}"]}